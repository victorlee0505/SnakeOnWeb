package SnakeGUI;

import java.util.Comparator;
import java.util.*;

/**
 * Created by victo on 7/24/2017.
 */


public class modelGUI {


    private static String userID;

    public int score = 100;

    public boolean GameOver = false;

    public SnakeGame.GamePanel game;

    //Connection to server
    private static serverStream myServer = new serverStream();


    /**
     * Contructor: Once the program is initialized, it will obtain MAP from server.
     */
    public modelGUI() {

    }

    /**
     * Mutator for score
     * This method is to pass Score from in-game to modelGUI
     * @param score
     */
    public void setScore(int score) {
        this.score = score;

        System.out.println(this.score);
    }

    /**
     * Mutator to obtain game status (Ended or not)
     * This method is to pass GameOver state from in-game to modelGUI
     * @param gameOver
     */
    public void setGameOver(boolean gameOver) {
        this.GameOver = gameOver;
        System.out.println(this.GameOver);
    }


    /**
     * This method is to sort an unsorted map with UserID and score.
     * It will rearrange base on score (high to low) from map generated by server.
     * @param unsortMap a unsorted map from server
     * @param <String> Key: UserID
     * @param <Integer> Value: Score
     * @return a new sorted Map
     */
    public static <String, Integer extends Comparable<? super Integer>> Map<String, Integer> sortByScore(Map<String, Integer> unsortMap) {

        List<Map.Entry<String, Integer>> list = new LinkedList<Map.Entry<String, Integer>>(unsortMap.entrySet());

        Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {
            public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
                return (o2.getValue()).compareTo(o1.getValue());
            }
        });

        Map<String, Integer> result = new LinkedHashMap<>();
        for (Map.Entry<String, Integer> entry : list) {
            result.put(entry.getKey(), entry.getValue());
        }

        System.out.println(result);
        return result;
    }

    /**
     * Accessor to obtain SORTED scoreList from high to low base on Score.
     *
     * @return String of UserID and Score
     */
    public String getScoreList() {

        myServer.jsonToMap();

        String s = "";
        int i = 0;
        for (Map.Entry<String, Integer> a : sortByScore(myServer.getScoreMap()).entrySet()) {
            i += 1;
            if(a.getKey().equals(modelGUI.getUserID())) {


                s += "<html>" + i + " | <i><u><b>Player: " + a.getKey() + " | " + "Score: " + a.getValue() + "</b></u></i></html>\n";
            }
            else{

                s += "<html>" + i +" | Player: " + a.getKey() + " | " + "Score: " + a.getValue() + "</html>\n";
            }

            System.out.println(s);
        }
        return s;
    }


    /**
     * This method is to execute server exchange data base on the information from control and model.
     * the model will obtain UserID and score from the game.
     * 1. It will create a new user profile on server if user does not exist.
     * or
     * 2. It will compare the in-game score vs server score to check if an update is required.
     */
    public void submitScore() {

        myServer.jsonToMap();

        myServer.setUserID(userID);
        myServer.setScore(score);

        System.out.println(myServer.getScoreMap().get(userID));

        if(myServer.getScoreMap().get(userID)==null){
            System.out.println("system is adding new userID to Server");
            myServer.loginServer();
            System.out.println("system is updating new new score to Server");
            myServer.putScoreServer();

        }
        else {
            if (score > myServer.getScoreMap().get(userID)) {
                System.out.println("inGame Score is higher than Server Score, submitting");
                myServer.putScoreServer();
            }
        }
    }

    /**
     * Mutator for UserID
     * @param userID
     */
    public static void setUserID(String userID) {
        modelGUI.userID = userID;
    }

    /**
     * Accessor for UserID
     * @return userID
     */
    public static String getUserID() {
        return userID;
    }


    /**
     * Accessor for in-gam score
     * @return score
     */
    public int getScore() {
        return score;
    }

    /**
     * Resetting GameOver status for GUI purpose
     * @return
     */
    public boolean resetGameOver(){
        return false;
    }

    public static void main(String[] args) {

        modelGUI model = new modelGUI();

        model.userID="jaycen";

        model.getScoreList();
    }


}






